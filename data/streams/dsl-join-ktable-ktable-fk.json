[
  {
    "Operation": "<p class=\"first\"><strong>Inner Join</strong></p> <ul class=\"last simple\"> <li>(KTable, KTable) → KTable</li> </ul>",
    "Description": "<p class=\"first\">Performs a foreign-key INNER JOIN of this table with another table. The result is an ever-updating KTable that represents the \"current\" result of the join. <a class=\"reference external\" href=\"/%7B%7Bversion%7D%7D/javadoc/org/apache/kafka/streams/kstream/KTable.html#join-org.apache.kafka.streams.kstream.KTable-org.apache.kafka.streams.kstream.ValueJoiner-\">(details)</a></p> <pre class=\"line-numbers\"><code class=\"language-java\">KTable<String, Long> left = ...; KTable<Long, Double> right = ...; //This foreignKeyExtractor simply uses the left-value to map to the right-key. Function<Long, Long> foreignKeyExtractor = (x) -> x; // Java 8+ example, using lambda expressions KTable<String, String> joined = left.join(right, foreignKeyExtractor, (leftValue, rightValue) -> \"left=\" + leftValue + \", right=\" + rightValue /* ValueJoiner */ );</code></pre> <p>Detailed behavior:</p> <ul> <li> <p class=\"first\">The join is <em>key-based</em>, i.e. with the join predicate: </p> <pre class=\"line-numbers\"><code class=\"language-java\">foreignKeyExtractor.apply(leftRecord.value) == rightRecord.key</code></pre> </li> <li> <p class=\"first\">The join will be triggered under the conditions listed below whenever new input is received. When it is triggered, the user-supplied <code class=\"docutils literal\"><span class=\"pre\">ValueJoiner</span></code> will be called to produce join output records.</p> <blockquote> <div> <ul class=\"simple\"> <li> Records for which the <code class=\"docutils literal\"><span class=\"pre\">foreignKeyExtractor</span></code> produces <code class=\"docutils literal\"><span class=\"pre\">null</span></code> are ignored and do not trigger a join. If you want to join with <code class=\"docutils literal\"><span class=\"pre\">null</span></code> foreign keys, use a suitable sentinel value to do so (i.e. <code class=\"docutils literal\"><span class=\"pre\">\"NULL\"</span></code> for a String field, or <code class=\"docutils literal\"><span class=\"pre\">-1</span></code> for an auto-incrementing integer field). </li> <li>Input records with a <code class=\"docutils literal\"><span class=\"pre\">null</span></code> value are interpreted as <em>tombstones</em> for the corresponding key, which indicate the deletion of the key from the table. Tombstones do not trigger the join. When an input tombstone is received, then an output tombstone is forwarded directly to the join result KTable if required (i.e. only if the corresponding key actually exists already in the join result KTable).</li> </ul> </div> </blockquote> </li> </ul> <p class=\"last\">See the semantics overview at the bottom of this section for a detailed description.</p>"
  },
  {
    "Operation": "<p class=\"first\"><strong>Left Join</strong></p> <ul class=\"last simple\"> <li>(KTable, KTable) → KTable</li> </ul>",
    "Description": "<p class=\"first\">Performs a foreign-key LEFT JOIN of this table with another table. <a class=\"reference external\" href=\"/%7B%7Bversion%7D%7D/javadoc/org/apache/kafka/streams/kstream/KTable.html#leftJoin-org.apache.kafka.streams.kstream.KTable-org.apache.kafka.streams.kstream.ValueJoiner-\">(details)</a></p> <pre class=\"line-numbers\"><code class=\"language-java\">KTable<String, Long> left = ...; KTable<Long, Double> right = ...; //This foreignKeyExtractor simply uses the left-value to map to the right-key. Function<Long, Long> foreignKeyExtractor = (x) -> x; // Java 8+ example, using lambda expressions KTable<String, String> joined = left.leftJoin(right, foreignKeyExtractor, (leftValue, rightValue) -> \"left=\" + leftValue + \", right=\" + rightValue /* ValueJoiner */ );</code></pre> <p>Detailed behavior:</p> <ul> <li> <p class=\"first\">The join is <em>key-based</em>, i.e. with the join predicate: </p> <pre class=\"line-numbers\"><code class=\"language-java\">foreignKeyExtractor.apply(leftRecord.value) == rightRecord.key</code></pre> </li> <li> <p class=\"first\">The join will be triggered under the conditions listed below whenever new input is received. When it is triggered, the user-supplied <code class=\"docutils literal\"><span class=\"pre\">ValueJoiner</span></code> will be called to produce join output records.</p> <blockquote> <div> <ul class=\"simple\"> <li> Records for which the <code class=\"docutils literal\"><span class=\"pre\">foreignKeyExtractor</span></code> produces <code class=\"docutils literal\"><span class=\"pre\">null</span></code> are ignored and do not trigger a join. If you want to join with <code class=\"docutils literal\"><span class=\"pre\">null</span></code> foreign keys, use a suitable sentinel value to do so (i.e. <code class=\"docutils literal\"><span class=\"pre\">\"NULL\"</span></code> for a String field, or <code class=\"docutils literal\"><span class=\"pre\">-1</span></code> for an auto-incrementing integer field). </li> <li>Input records with a <code class=\"docutils literal\"><span class=\"pre\">null</span></code> value are interpreted as <em>tombstones</em> for the corresponding key, which indicate the deletion of the key from the table. Right-tombstones trigger the join, but left-tombstones don't: when an input tombstone is received, then an output tombstone is forwarded directly to the join result KTable if required (i.e. only if the corresponding key actually exists already in the join result KTable).</li> </ul> </div> </blockquote> </li> <li> <p class=\"first\">For each input record on the left side that does not have any match on the right side, the <code class=\"docutils literal\"><span class=\"pre\">ValueJoiner</span></code> will be called with <code class=\"docutils literal\"><span class=\"pre\">ValueJoiner#apply(leftRecord.value,</span> <span class=\"pre\">null)</span></code>; this explains the row with timestamp=7 & 8 in the table below, which lists <code class=\"docutils literal\"><span class=\"pre\">(q,10,null) and (r,10,null)</span></code> in the LEFT JOIN column.</p> </li> </ul> <p class=\"last\">See the semantics overview at the bottom of this section for a detailed description.</p>"
  }
]