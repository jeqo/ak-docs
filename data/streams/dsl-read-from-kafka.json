[
  {
    "Operation": "<p class=\"first\"><strong>Stream</strong></p><ul class=\"last simple\"> <li><em>input topics</em> → KStream</li></ul>",
    "Description": "<p class=\"first\">Creates a <a class=\"reference internal\" href=\"#streams_concepts_kstream\"><span class=\"std std-ref\">KStream</span></a> from the specified Kafka input topics and interprets the data as a <a class=\"reference internal\" href=\"#streams_concepts_kstream\"><span class=\"std std-ref\">record stream</span></a>. A <code class=\"docutils literal\"><span class=\"pre\">KStream</span></code> represents a <em>partitioned</em> record stream. <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/StreamsBuilder.html#stream(java.lang.String)\">(details)</a></p> <p>In the case of a KStream, the local KStream instance of every application instance will be populated with data from only <strong>a subset</strong> of the partitions of the input topic. Collectively, across all application instances, all input topic partitions are read and processed.</p> <pre class=\"line-numbers\"><code class=\"language-java\">import org.apache.kafka.common.serialization.Serdes; import org.apache.kafka.streams.StreamsBuilder; import org.apache.kafka.streams.kstream.KStream; StreamsBuilder builder = new StreamsBuilder(); KStream<String, Long> wordCounts = builder.stream( \"word-counts-input-topic\", /* input topic */ Consumed.with( Serdes.String(), /* key serde */ Serdes.Long()/* value serde */ );</code></pre> <p>If you do not specify Serdes explicitly, the default Serdes from the <a class=\"reference internal\" href=\"config-streams.html#streams-developer-guide-configuration\"><span class=\"std std-ref\">configuration</span></a> are used.</p> <p>You <strong>must specify Serdes explicitly</strong> if the key or value types of the records in the Kafka input topics do not match the configured default Serdes. For information about configuring default Serdes, available Serdes, and implementing your own custom Serdes see <a class=\"reference internal\" href=\"datatypes.html#streams-developer-guide-serdes\"><span class=\"std std-ref\">Data Types and Serialization</span></a>.</p> <p class=\"last\">Several variants of <code class=\"docutils literal\"><span class=\"pre\">stream</span></code> exist. For example, you can specify a regex pattern for input topics to read from (note that all matching topics will be part of the same input topic group, and the work will not be parallelized for different topics if subscribed to in this way).</p>"
  },
  {
    "Operation": "<p class=\"first\"><strong>Table</strong></p><ul class=\"last simple\"> <li><em>input topic</em> → KTable</li></ul>",
    "Description": "<p class=\"first\">Reads the specified Kafka input topic into a <a class=\"reference internal\" href=\"#streams_concepts_ktable\"><span class=\"std std-ref\">KTable</span></a>. The topic is interpreted as a changelog stream, where records with the same key are interpreted as UPSERT aka INSERT/UPDATE (when the record value is not <code class=\"docutils literal\"><span class=\"pre\">null</span></code>) or as DELETE (when the value is <code class=\"docutils literal\"><span class=\"pre\">null</span></code>) for that key. <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/StreamsBuilder.html#table-java.lang.String(java.lang.String)\">(details)</a></p> <p>In the case of a KTable, the local KTable instance of every application instance will be populated with data from only <strong>a subset</strong> of the partitions of the input topic. Collectively, across all application instances, all input topic partitions are read and processed.</p> <p>You must provide a name for the table (more precisely, for the internal <a class=\"reference internal\" href=\"../architecture.html#streams_architecture_state\"><span class=\"std std-ref\">state store</span></a> that backs the table). This is required for supporting <a class=\"reference internal\" href=\"interactive-queries.html#streams-developer-guide-interactive-queries\"><span class=\"std std-ref\">interactive queries</span></a> against the table. When a name is not provided the table will not be queryable and an internal name will be provided for the state store.</p> <p>If you do not specify Serdes explicitly, the default Serdes from the <a class=\"reference internal\" href=\"config-streams.html#streams-developer-guide-configuration\"><span class=\"std std-ref\">configuration</span></a> are used.</p> <p>You <strong>must specify Serdes explicitly</strong> if the key or value types of the records in the Kafka input topics do not match the configured default Serdes. For information about configuring default Serdes, available Serdes, and implementing your own custom Serdes see <a class=\"reference internal\" href=\"datatypes.html#streams-developer-guide-serdes\"><span class=\"std std-ref\">Data Types and Serialization</span></a>.</p> <p class=\"last\">Several variants of <code class=\"docutils literal\"><span class=\"pre\">table</span></code> exist, for example to specify the <code class=\"docutils literal\"><span class=\"pre\">auto.offset.reset</span></code> policy to be used when reading from the input topic.</p>"
  },
  {
    "Operation": "<p class=\"first\"><strong>Global Table</strong></p><ul class=\"last simple\"> <li><em>input topic</em> → GlobalKTable</li></ul>",
    "Description": "<p class=\"first\">Reads the specified Kafka input topic into a <a class=\"reference internal\" href=\"#streams_concepts_globalktable\"><span class=\"std std-ref\">GlobalKTable</span></a>. The topic is interpreted as a changelog stream, where records with the same key are interpreted as UPSERT aka INSERT/UPDATE (when the record value is not <code class=\"docutils literal\"><span class=\"pre\">null</span></code>) or as DELETE (when the value is <code class=\"docutils literal\"><span class=\"pre\">null</span></code>) for that key. <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/StreamsBuilder.html#globalTable-java.lang.String(java.lang.String)\">(details)</a></p> <p>In the case of a GlobalKTable, the local GlobalKTable instance of every application instance will be populated with data from <strong>all</strong> the partitions of the input topic.</p> <p>You must provide a name for the table (more precisely, for the internal <a class=\"reference internal\" href=\"../architecture.html#streams_architecture_state\"><span class=\"std std-ref\">state store</span></a> that backs the table). This is required for supporting <a class=\"reference internal\" href=\"interactive-queries.html#streams-developer-guide-interactive-queries\"><span class=\"std std-ref\">interactive queries</span></a> against the table. When a name is not provided the table will not be queryable and an internal name will be provided for the state store.</p> <pre class=\"line-numbers\"><code class=\"language-java\">import org.apache.kafka.common.serialization.Serdes; import org.apache.kafka.streams.StreamsBuilder; import org.apache.kafka.streams.kstream.GlobalKTable; StreamsBuilder builder = new StreamsBuilder(); GlobalKTable<String, Long> wordCounts = builder.globalTable( \"word-counts-input-topic\", Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as( \"word-counts-global-store\" /* table/store name */) .withKeySerde(Serdes.String()) /* key serde */ .withValueSerde(Serdes.Long()) /* value serde */ );</code></pre> <p>You <strong>must specify Serdes explicitly</strong> if the key or value types of the records in the Kafka input topics do not match the configured default Serdes. For information about configuring default Serdes, available Serdes, and implementing your own custom Serdes see <a class=\"reference internal\" href=\"datatypes.html#streams-developer-guide-serdes\"><span class=\"std std-ref\">Data Types and Serialization</span></a>.</p> <p class=\"last\">Several variants of <code class=\"docutils literal\"><span class=\"pre\">globalTable</span></code> exist to e.g. specify explicit Serdes.</p>"
  }
]