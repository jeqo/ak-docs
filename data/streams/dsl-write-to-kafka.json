[
  {
    "Operation": "<p class=\"first\"><strong>To</strong></p> <ul class=\"last simple\"> <li>KStream -> void</li> </ul>",
    "Description": "<p class=\"first\"><strong>Terminal operation.</strong> Write the records to Kafka topic(s). (<a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#to(java.lang.String)\">KStream details</a>)</p> <p>When to provide serdes explicitly:</p> <ul class=\"simple\"> <li>If you do not specify Serdes explicitly, the default Serdes from the <a class=\"reference internal\" href=\"config-streams.html#streams-developer-guide-configuration\"><span class=\"std std-ref\">configuration</span></a> are used.</li> <li>You <strong>must specify Serdes explicitly</strong> via the <code class=\"docutils literal\"><span class=\"pre\">Produced</span></code> class if the key and/or value types of the <code class=\"docutils literal\"><span class=\"pre\">KStream</span></code> do not match the configured default Serdes.</li> <li>See <a class=\"reference internal\" href=\"datatypes.html#streams-developer-guide-serdes\"><span class=\"std std-ref\">Data Types and Serialization</span></a> for information about configuring default Serdes, available Serdes, and implementing your own custom Serdes.</li> </ul> <p>A variant of <code class=\"docutils literal\"><span class=\"pre\">to</span></code> exists that enables you to specify how the data is produced by using a <code class=\"docutils literal\"><span class=\"pre\">Produced</span></code> instance to specify, for example, a <code class=\"docutils literal\"><span class=\"pre\">StreamPartitioner</span></code> that gives you control over how output records are distributed across the partitions of the output topic.</p> <p>Another variant of <code class=\"docutils literal\"><span class=\"pre\">to</span></code> exists that enables you to dynamically choose which topic to send to for each record via a <code class=\"docutils literal\"><span class=\"pre\">TopicNameExtractor</span></code> instance.</p> <pre class=\"line-numbers\"><code class=\"language-java\">KStream<String, Long> stream = ...; // Write the stream to the output topic, using the configured default key // and value serdes. stream.to(\"my-stream-output-topic\"); // Write the stream to the output topic, using explicit key and value serdes, // (thus overriding the defaults in the config properties). stream.to(\"my-stream-output-topic\", Produced.with(Serdes.String(), Serdes.Long());</code></pre> <p><strong>Causes data re-partitioning if any of the following conditions is true:</strong></p> <ol class=\"last arabic simple\"> <li>If the output topic has a different number of partitions than the stream/table.</li> <li>If the <code class=\"docutils literal\"><span class=\"pre\">KStream</span></code> was marked for re-partitioning.</li> <li>If you provide a custom <code class=\"docutils literal\"><span class=\"pre\">StreamPartitioner</span></code> to explicitly control how to distribute the output records across the partitions of the output topic.</li> <li>If the key of an output record is <code class=\"docutils literal\"><span class=\"pre\">null</span></code>.</li> </ol>"
  }
]