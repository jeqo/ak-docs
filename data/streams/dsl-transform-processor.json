[
  {
    "Operation": "<p class=\"first\"><strong>Process</strong></p> <ul class=\"last simple\"> <li>KStream -> void</li> </ul>",
    "Description": "<p class=\"first\"><strong>Terminal operation.</strong> Applies a <code class=\"docutils literal\"><span class=\"pre\">Processor</span></code> to each record. <code class=\"docutils literal\"><span class=\"pre\">process()</span></code> allows you to leverage the <a class=\"reference internal\" href=\"processor-api.html#streams-developer-guide-processor-api\"><span class=\"std std-ref\">Processor API</span></a> from the DSL. (<a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#process-org.apache.kafka.streams.processor.ProcessorSupplier-java.lang.String...-\">details</a>)</p> <p>This is essentially equivalent to adding the <code class=\"docutils literal\"><span class=\"pre\">Processor</span></code> via <code class=\"docutils literal\"><span class=\"pre\">Topology#addProcessor()</span></code> to your <a class=\"reference internal\" href=\"../core-concepts.html#streams_topology\"><span class=\"std std-ref\">processor topology</span></a>.</p> <p class=\"last\">An example is available in the <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#process-org.apache.kafka.streams.processor.ProcessorSupplier-java.lang.String...-\">javadocs</a>.</p>"
  },
  {
    "Operation": "<p class=\"first\"><strong>Transform</strong></p> <ul class=\"last simple\"> <li>KStream -> KStream</li> </ul>",
    "Description": "<p class=\"first\">Applies a <code class=\"docutils literal\"><span class=\"pre\">Transformer</span></code> to each record. <code class=\"docutils literal\"><span class=\"pre\">transform()</span></code> allows you to leverage the <a class=\"reference internal\" href=\"processor-api.html#streams-developer-guide-processor-api\"><span class=\"std std-ref\">Processor API</span></a> from the DSL. (<a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#transform-org.apache.kafka.streams.kstream.TransformerSupplier-java.lang.String...-\">details</a>)</p> <p>Each input record is transformed into zero, one, or more output records (similar to the stateless <code class=\"docutils literal\"><span class=\"pre\">flatMap</span></code>). The <code class=\"docutils literal\"><span class=\"pre\">Transformer</span></code> must return <code class=\"docutils literal\"><span class=\"pre\">null</span></code> for zero output. You can modify the recordâ€™s key and value, including their types.</p> <p><strong>Marks the stream for data re-partitioning:</strong> Applying a grouping or a join after <code class=\"docutils literal\"><span class=\"pre\">transform</span></code> will result in re-partitioning of the records. If possible use <code class=\"docutils literal\"><span class=\"pre\">transformValues</span></code> instead, which will not cause data re-partitioning.</p> <p><code class=\"docutils literal\"><span class=\"pre\">transform</span></code> is essentially equivalent to adding the <code class=\"docutils literal\"><span class=\"pre\">Transformer</span></code> via <code class=\"docutils literal\"><span class=\"pre\">Topology#addProcessor()</span></code> to your <a class=\"reference internal\" href=\"../core-concepts.html#streams_topology\"><span class=\"std std-ref\">processor topology</span></a>.</p> <p class=\"last\">An example is available in the <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#transform-org.apache.kafka.streams.kstream.TransformerSupplier-java.lang.String...-\">javadocs</a>. </p>"
  },
  {
    "Operation": "<p class=\"first\"><strong>Transform (values only)</strong></p> <ul class=\"last simple\"> <li>KStream -> KStream</li> <li>KTable -> KTable</li> </ul>",
    "Description": "<p class=\"first\">Applies a <code class=\"docutils literal\"><span class=\"pre\">ValueTransformer</span></code> to each record, while retaining the key of the original record. <code class=\"docutils literal\"><span class=\"pre\">transformValues()</span></code> allows you to leverage the <a class=\"reference internal\" href=\"processor-api.html#streams-developer-guide-processor-api\"><span class=\"std std-ref\">Processor API</span></a> from the DSL. (<a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#transformValues-org.apache.kafka.streams.kstream.ValueTransformerSupplier-java.lang.String...-\">details</a>)</p> <p>Each input record is transformed into exactly one output record (zero output records or multiple output records are not possible). The <code class=\"docutils literal\"><span class=\"pre\">ValueTransformer</span></code> may return <code class=\"docutils literal\"><span class=\"pre\">null</span></code> as the new value for a record.</p> <p><code class=\"docutils literal\"><span class=\"pre\">transformValues</span></code> is preferable to <code class=\"docutils literal\"><span class=\"pre\">transform</span></code> because it will not cause data re-partitioning.</p> <p><code class=\"docutils literal\"><span class=\"pre\">transformValues</span></code> is essentially equivalent to adding the <code class=\"docutils literal\"><span class=\"pre\">ValueTransformer</span></code> via <code class=\"docutils literal\"><span class=\"pre\">Topology#addProcessor()</span></code> to your <a class=\"reference internal\" href=\"../core-concepts.html#streams_topology\"><span class=\"std std-ref\">processor topology</span></a>.</p> <p class=\"last\">An example is available in the <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/kstream/KStream.html#transformValues-org.apache.kafka.streams.kstream.ValueTransformerSupplier-java.lang.String...-\">javadocs</a>.</p>"
  }
]