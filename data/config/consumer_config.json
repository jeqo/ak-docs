[{"name":"key.deserializer","documentation":"Deserializer class for key that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.","headers":{"Type":"class","Default":"","Valid Values":"","Importance":"high"}},{"name":"value.deserializer","documentation":"Deserializer class for value that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.","headers":{"Type":"class","Default":"","Valid Values":"","Importance":"high"}},{"name":"bootstrap.servers","documentation":"A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form <code>host1:port1,host2:port2,...</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).","headers":{"Type":"list","Default":"\"\"","Valid Values":"non-null string","Importance":"high"}},{"name":"fetch.min.bytes","documentation":"The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.","headers":{"Type":"int","Default":"1","Valid Values":"[0,...]","Importance":"high"}},{"name":"group.id","documentation":"A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using <code>subscribe(topic)</code> or the Kafka-based offset management strategy.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"high"}},{"name":"heartbeat.interval.ms","documentation":"The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than <code>session.timeout.ms</code>, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.","headers":{"Type":"int","Default":"3000 (3 seconds)","Valid Values":"","Importance":"high"}},{"name":"max.partition.fetch.bytes","documentation":"The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config). See fetch.max.bytes for limiting the consumer request size.","headers":{"Type":"int","Default":"1048576 (1 mebibyte)","Valid Values":"[0,...]","Importance":"high"}},{"name":"session.timeout.ms","documentation":"The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by <code>group.min.session.timeout.ms</code> and <code>group.max.session.timeout.ms</code>.","headers":{"Type":"int","Default":"45000 (45 seconds)","Valid Values":"","Importance":"high"}},{"name":"ssl.key.password","documentation":"The password of the private key in the key store file or the PEM key specified in 'ssl.keystore.key'.","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.keystore.certificate.chain","documentation":"Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.keystore.key","documentation":"Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.keystore.location","documentation":"The location of the key store file. This is optional for client and can be used for two-way authentication for client.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.keystore.password","documentation":"The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.truststore.certificates","documentation":"Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.truststore.location","documentation":"The location of the trust store file.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"high"}},{"name":"ssl.truststore.password","documentation":"The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"high"}},{"name":"allow.auto.create.topics","documentation":"Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using `auto.create.topics.enable` broker configuration. This configuration must be set to `false` when using brokers older than 0.11.0","headers":{"Type":"boolean","Default":"true","Valid Values":"","Importance":"medium"}},{"name":"auto.offset.reset","documentation":"What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): <ul><li>earliest: automatically reset the offset to the earliest offset<li>latest: automatically reset the offset to the latest offset</li><li>none: throw exception to the consumer if no previous offset is found for the consumer's group</li><li>anything else: throw exception to the consumer.</li></ul>","headers":{"Type":"string","Default":"latest","Valid Values":"[latest, earliest, none]","Importance":"medium"}},{"name":"client.dns.lookup","documentation":"Controls how the client uses DNS lookups. If set to <code>use_all_dns_ips</code>, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to <code>resolve_canonical_bootstrap_servers_only</code>, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as <code>use_all_dns_ips</code>.","headers":{"Type":"string","Default":"use_all_dns_ips","Valid Values":"[use_all_dns_ips, resolve_canonical_bootstrap_servers_only]","Importance":"medium"}},{"name":"connections.max.idle.ms","documentation":"Close idle connections after the number of milliseconds specified by this config.","headers":{"Type":"long","Default":"540000 (9 minutes)","Valid Values":"","Importance":"medium"}},{"name":"default.api.timeout.ms","documentation":"Specifies the timeout (in milliseconds) for client APIs. This configuration is used as the default timeout for all client operations that do not specify a <code>timeout</code> parameter.","headers":{"Type":"int","Default":"60000 (1 minute)","Valid Values":"[0,...]","Importance":"medium"}},{"name":"enable.auto.commit","documentation":"If true the consumer's offset will be periodically committed in the background.","headers":{"Type":"boolean","Default":"true","Valid Values":"","Importance":"medium"}},{"name":"exclude.internal.topics","documentation":"Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.","headers":{"Type":"boolean","Default":"true","Valid Values":"","Importance":"medium"}},{"name":"fetch.max.bytes","documentation":"The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config). Note that the consumer performs multiple fetches in parallel.","headers":{"Type":"int","Default":"52428800 (50 mebibytes)","Valid Values":"[0,...]","Importance":"medium"}},{"name":"group.instance.id","documentation":"A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.","headers":{"Type":"string","Default":"null","Valid Values":"non-empty string","Importance":"medium"}},{"name":"isolation.level","documentation":"Controls how to read messages written transactionally. If set to <code>read_committed</code>, consumer.poll() will only return transactional messages which have been committed. If set to <code>read_uncommitted</code> (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. <p>Messages will always be returned in offset order. Hence, in  <code>read_committed</code> mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, <code>read_committed</code> consumers will not be able to read up to the high watermark when there are in flight transactions.</p><p> Further, when in <code>read_committed</code> the seekToEnd method will return the LSO</p>","headers":{"Type":"string","Default":"read_uncommitted","Valid Values":"[read_committed, read_uncommitted]","Importance":"medium"}},{"name":"max.poll.interval.ms","documentation":"The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. For consumers using a non-null <code>group.instance.id</code> which reach this timeout, partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of <code>session.timeout.ms</code>. This mirrors the behavior of a static consumer which has shutdown.","headers":{"Type":"int","Default":"300000 (5 minutes)","Valid Values":"[1,...]","Importance":"medium"}},{"name":"max.poll.records","documentation":"The maximum number of records returned in a single call to poll(). Note, that <code>max.poll.records</code> does not impact the underlying fetching behavior. The consumer will cache the records from each fetch request and returns them incrementally from each poll.","headers":{"Type":"int","Default":"500","Valid Values":"[1,...]","Importance":"medium"}},{"name":"partition.assignment.strategy","documentation":"A list of class names or class types, ordered by preference, of supported partition assignment strategies that the client will use to distribute partition ownership amongst consumer instances when group management is used. Available options are:<ul><li><code>org.apache.kafka.clients.consumer.RangeAssignor</code>: Assigns partitions on a per-topic basis.</li><li><code>org.apache.kafka.clients.consumer.RoundRobinAssignor</code>: Assigns partitions to consumers in a round-robin fashion.</li><li><code>org.apache.kafka.clients.consumer.StickyAssignor</code>: Guarantees an assignment that is maximally balanced while preserving as many existing partition assignments as possible.</li><li><code>org.apache.kafka.clients.consumer.CooperativeStickyAssignor</code>: Follows the same StickyAssignor logic, but allows for cooperative rebalancing.</li></ul><p>The default assignor is [RangeAssignor, CooperativeStickyAssignor], which will use the RangeAssignor by default, but allows upgrading to the CooperativeStickyAssignor with just a single rolling bounce that removes the RangeAssignor from the list.</p><p>Implementing the <code>org.apache.kafka.clients.consumer.ConsumerPartitionAssignor</code> interface allows you to plug in a custom assignment strategy.</p>","headers":{"Type":"list","Default":"class org.apache.kafka.clients.consumer.RangeAssignor,class org.apache.kafka.clients.consumer.CooperativeStickyAssignor","Valid Values":"non-null string","Importance":"medium"}},{"name":"receive.buffer.bytes","documentation":"The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.","headers":{"Type":"int","Default":"65536 (64 kibibytes)","Valid Values":"[-1,...]","Importance":"medium"}},{"name":"request.timeout.ms","documentation":"The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.","headers":{"Type":"int","Default":"30000 (30 seconds)","Valid Values":"[0,...]","Importance":"medium"}},{"name":"sasl.client.callback.handler.class","documentation":"The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.","headers":{"Type":"class","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"sasl.jaas.config","documentation":"JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described <a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html\">here</a>. The format for the value is: <code>loginModuleClass controlFlag (optionName=optionValue)*;</code>. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;","headers":{"Type":"password","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"sasl.kerberos.service.name","documentation":"The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"sasl.login.callback.handler.class","documentation":"The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler","headers":{"Type":"class","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"sasl.login.class","documentation":"The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin","headers":{"Type":"class","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"sasl.mechanism","documentation":"SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.","headers":{"Type":"string","Default":"GSSAPI","Valid Values":"","Importance":"medium"}},{"name":"sasl.oauthbearer.jwks.endpoint.url","documentation":"The OAuth/OIDC provider URL from which the provider's <a href=\"https://datatracker.ietf.org/doc/html/rfc7517#section-5\">JWKS (JSON Web Key Set)</a> can be retrieved. The URL can be HTTP(S)-based or file-based. If the URL is HTTP(S)-based, the JWKS data will be retrieved from the OAuth/OIDC provider via the configured URL on broker startup. All then-current keys will be cached on the broker for incoming requests. If an authentication request is received for a JWT that includes a \"kid\" header claim value that isn't yet in the cache, the JWKS endpoint will be queried again on demand. However, the broker polls the URL every sasl.oauthbearer.jwks.endpoint.refresh.ms milliseconds to refresh the cache with any forthcoming keys before any JWT requests that include them are received. If the URL is file-based, the broker will load the JWKS file from a configured location on startup. In the event that the JWT includes a \"kid\" header value that isn't in the JWKS file, the broker will reject the JWT and authentication will fail.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"sasl.oauthbearer.token.endpoint.url","documentation":"The URL for the OAuth/OIDC identity provider. If the URL is HTTP(S)-based, it is the issuer's token endpoint URL to which requests will be made to login based on the configuration in sasl.jaas.config. If the URL is file-based, it specifies a file containing an access token (in JWT serialized form) issued by the OAuth/OIDC identity provider to use for authorization.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"security.protocol","documentation":"Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.","headers":{"Type":"string","Default":"PLAINTEXT","Valid Values":"[PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL]","Importance":"medium"}},{"name":"send.buffer.bytes","documentation":"The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.","headers":{"Type":"int","Default":"131072 (128 kibibytes)","Valid Values":"[-1,...]","Importance":"medium"}},{"name":"socket.connection.setup.timeout.max.ms","documentation":"The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.","headers":{"Type":"long","Default":"30000 (30 seconds)","Valid Values":"","Importance":"medium"}},{"name":"socket.connection.setup.timeout.ms","documentation":"The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.","headers":{"Type":"long","Default":"10000 (10 seconds)","Valid Values":"","Importance":"medium"}},{"name":"ssl.enabled.protocols","documentation":"The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for `ssl.protocol`.","headers":{"Type":"list","Default":"TLSv1.2,TLSv1.3","Valid Values":"","Importance":"medium"}},{"name":"ssl.keystore.type","documentation":"The file format of the key store file. This is optional for client. The values currently supported by the default `ssl.engine.factory.class` are [JKS, PKCS12, PEM].","headers":{"Type":"string","Default":"JKS","Valid Values":"","Importance":"medium"}},{"name":"ssl.protocol","documentation":"The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.","headers":{"Type":"string","Default":"TLSv1.3","Valid Values":"","Importance":"medium"}},{"name":"ssl.provider","documentation":"The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"medium"}},{"name":"ssl.truststore.type","documentation":"The file format of the trust store file. The values currently supported by the default `ssl.engine.factory.class` are [JKS, PKCS12, PEM].","headers":{"Type":"string","Default":"JKS","Valid Values":"","Importance":"medium"}},{"name":"auto.commit.interval.ms","documentation":"The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if <code>enable.auto.commit</code> is set to <code>true</code>.","headers":{"Type":"int","Default":"5000 (5 seconds)","Valid Values":"[0,...]","Importance":"low"}},{"name":"auto.include.jmx.reporter","documentation":"Deprecated. Whether to automatically include JmxReporter even if it's not listed in <code>metric.reporters</code>. This configuration will be removed in Kafka 4.0, users should instead include <code>org.apache.kafka.common.metrics.JmxReporter</code> in <code>metric.reporters</code> in order to enable the JmxReporter.","headers":{"Type":"boolean","Default":"true","Valid Values":"","Importance":"low"}},{"name":"check.crcs","documentation":"Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.","headers":{"Type":"boolean","Default":"true","Valid Values":"","Importance":"low"}},{"name":"client.id","documentation":"An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.","headers":{"Type":"string","Default":"\"\"","Valid Values":"","Importance":"low"}},{"name":"client.rack","documentation":"A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config 'broker.rack'","headers":{"Type":"string","Default":"\"\"","Valid Values":"","Importance":"low"}},{"name":"fetch.max.wait.ms","documentation":"The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.","headers":{"Type":"int","Default":"500","Valid Values":"[0,...]","Importance":"low"}},{"name":"interceptor.classes","documentation":"A list of classes to use as interceptors. Implementing the <code>org.apache.kafka.clients.consumer.ConsumerInterceptor</code> interface allows you to intercept (and possibly mutate) records received by the consumer. By default, there are no interceptors.","headers":{"Type":"list","Default":"\"\"","Valid Values":"non-null string","Importance":"low"}},{"name":"metadata.max.age.ms","documentation":"The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.","headers":{"Type":"long","Default":"300000 (5 minutes)","Valid Values":"[0,...]","Importance":"low"}},{"name":"metric.reporters","documentation":"A list of classes to use as metrics reporters. Implementing the <code>org.apache.kafka.common.metrics.MetricsReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.","headers":{"Type":"list","Default":"\"\"","Valid Values":"non-null string","Importance":"low"}},{"name":"metrics.num.samples","documentation":"The number of samples maintained to compute metrics.","headers":{"Type":"int","Default":"2","Valid Values":"[1,...]","Importance":"low"}},{"name":"metrics.recording.level","documentation":"The highest recording level for metrics.","headers":{"Type":"string","Default":"INFO","Valid Values":"[INFO, DEBUG, TRACE]","Importance":"low"}},{"name":"metrics.sample.window.ms","documentation":"The window of time a metrics sample is computed over.","headers":{"Type":"long","Default":"30000 (30 seconds)","Valid Values":"[0,...]","Importance":"low"}},{"name":"reconnect.backoff.max.ms","documentation":"The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.","headers":{"Type":"long","Default":"1000 (1 second)","Valid Values":"[0,...]","Importance":"low"}},{"name":"reconnect.backoff.ms","documentation":"The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.","headers":{"Type":"long","Default":"50","Valid Values":"[0,...]","Importance":"low"}},{"name":"retry.backoff.ms","documentation":"The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.","headers":{"Type":"long","Default":"100","Valid Values":"[0,...]","Importance":"low"}},{"name":"sasl.kerberos.kinit.cmd","documentation":"Kerberos kinit command path.","headers":{"Type":"string","Default":"/usr/bin/kinit","Valid Values":"","Importance":"low"}},{"name":"sasl.kerberos.min.time.before.relogin","documentation":"Login thread sleep time between refresh attempts.","headers":{"Type":"long","Default":"60000","Valid Values":"","Importance":"low"}},{"name":"sasl.kerberos.ticket.renew.jitter","documentation":"Percentage of random jitter added to the renewal time.","headers":{"Type":"double","Default":"0.05","Valid Values":"","Importance":"low"}},{"name":"sasl.kerberos.ticket.renew.window.factor","documentation":"Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.","headers":{"Type":"double","Default":"0.8","Valid Values":"","Importance":"low"}},{"name":"sasl.login.connect.timeout.ms","documentation":"The (optional) value in milliseconds for the external authentication provider connection timeout. Currently applies only to OAUTHBEARER.","headers":{"Type":"int","Default":"null","Valid Values":"","Importance":"low"}},{"name":"sasl.login.read.timeout.ms","documentation":"The (optional) value in milliseconds for the external authentication provider read timeout. Currently applies only to OAUTHBEARER.","headers":{"Type":"int","Default":"null","Valid Values":"","Importance":"low"}},{"name":"sasl.login.refresh.buffer.seconds","documentation":"The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of  300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.","headers":{"Type":"short","Default":"300","Valid Values":"[0,...,3600]","Importance":"low"}},{"name":"sasl.login.refresh.min.period.seconds","documentation":"The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified.  This value and  sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.","headers":{"Type":"short","Default":"60","Valid Values":"[0,...,900]","Importance":"low"}},{"name":"sasl.login.refresh.window.factor","documentation":"Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.","headers":{"Type":"double","Default":"0.8","Valid Values":"[0.5,...,1.0]","Importance":"low"}},{"name":"sasl.login.refresh.window.jitter","documentation":"The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.","headers":{"Type":"double","Default":"0.05","Valid Values":"[0.0,...,0.25]","Importance":"low"}},{"name":"sasl.login.retry.backoff.max.ms","documentation":"The (optional) value in milliseconds for the maximum wait between login attempts to the external authentication provider. Login uses an exponential backoff algorithm with an initial wait based on the sasl.login.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.login.retry.backoff.max.ms setting. Currently applies only to OAUTHBEARER.","headers":{"Type":"long","Default":"10000 (10 seconds)","Valid Values":"","Importance":"low"}},{"name":"sasl.login.retry.backoff.ms","documentation":"The (optional) value in milliseconds for the initial wait between login attempts to the external authentication provider. Login uses an exponential backoff algorithm with an initial wait based on the sasl.login.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.login.retry.backoff.max.ms setting. Currently applies only to OAUTHBEARER.","headers":{"Type":"long","Default":"100","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.clock.skew.seconds","documentation":"The (optional) value in seconds to allow for differences between the time of the OAuth/OIDC identity provider and the broker.","headers":{"Type":"int","Default":"30","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.expected.audience","documentation":"The (optional) comma-delimited setting for the broker to use to verify that the JWT was issued for one of the expected audiences. The JWT will be inspected for the standard OAuth \"aud\" claim and if this value is set, the broker will match the value from JWT's \"aud\" claim  to see if there is an exact match. If there is no match, the broker will reject the JWT and authentication will fail.","headers":{"Type":"list","Default":"null","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.expected.issuer","documentation":"The (optional) setting for the broker to use to verify that the JWT was created by the expected issuer. The JWT will be inspected for the standard OAuth \"iss\" claim and if this value is set, the broker will match it exactly against what is in the JWT's \"iss\" claim. If there is no match, the broker will reject the JWT and authentication will fail.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.jwks.endpoint.refresh.ms","documentation":"The (optional) value in milliseconds for the broker to wait between refreshing its JWKS (JSON Web Key Set) cache that contains the keys to verify the signature of the JWT.","headers":{"Type":"long","Default":"3600000 (1 hour)","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms","documentation":"The (optional) value in milliseconds for the maximum wait between attempts to retrieve the JWKS (JSON Web Key Set) from the external authentication provider. JWKS retrieval uses an exponential backoff algorithm with an initial wait based on the sasl.oauthbearer.jwks.endpoint.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms setting.","headers":{"Type":"long","Default":"10000 (10 seconds)","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.jwks.endpoint.retry.backoff.ms","documentation":"The (optional) value in milliseconds for the initial wait between JWKS (JSON Web Key Set) retrieval attempts from the external authentication provider. JWKS retrieval uses an exponential backoff algorithm with an initial wait based on the sasl.oauthbearer.jwks.endpoint.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms setting.","headers":{"Type":"long","Default":"100","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.scope.claim.name","documentation":"The OAuth claim for the scope is often named \"scope\", but this (optional) setting can provide a different name to use for the scope included in the JWT payload's claims if the OAuth/OIDC provider uses a different name for that claim.","headers":{"Type":"string","Default":"scope","Valid Values":"","Importance":"low"}},{"name":"sasl.oauthbearer.sub.claim.name","documentation":"The OAuth claim for the subject is often named \"sub\", but this (optional) setting can provide a different name to use for the subject included in the JWT payload's claims if the OAuth/OIDC provider uses a different name for that claim.","headers":{"Type":"string","Default":"sub","Valid Values":"","Importance":"low"}},{"name":"security.providers","documentation":"A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the <code>org.apache.kafka.common.security.auth.SecurityProviderCreator</code> interface.","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"low"}},{"name":"ssl.cipher.suites","documentation":"A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.","headers":{"Type":"list","Default":"null","Valid Values":"","Importance":"low"}},{"name":"ssl.endpoint.identification.algorithm","documentation":"The endpoint identification algorithm to validate server hostname using server certificate. ","headers":{"Type":"string","Default":"https","Valid Values":"","Importance":"low"}},{"name":"ssl.engine.factory.class","documentation":"The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory","headers":{"Type":"class","Default":"null","Valid Values":"","Importance":"low"}},{"name":"ssl.keymanager.algorithm","documentation":"The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.","headers":{"Type":"string","Default":"SunX509","Valid Values":"","Importance":"low"}},{"name":"ssl.secure.random.implementation","documentation":"The SecureRandom PRNG implementation to use for SSL cryptography operations. ","headers":{"Type":"string","Default":"null","Valid Values":"","Importance":"low"}},{"name":"ssl.trustmanager.algorithm","documentation":"The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.","headers":{"Type":"string","Default":"PKIX","Valid Values":"","Importance":"low"}}]
